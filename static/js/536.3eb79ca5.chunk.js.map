{"version":3,"file":"static/js/536.3eb79ca5.chunk.js","mappings":"sRAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,GAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAsB,WACjC,OAAOF,EAAAA,GAAAA,IAAA,oBACR,EAEYG,EAAiB,SAAAC,GAC5B,OAAOJ,EAAAA,GAAAA,IAAA,iBAAoBI,GAC5B,EAEYC,EAAqB,SAAAD,GAChC,OAAOJ,EAAAA,GAAAA,IAAA,iBAAoBI,EAApB,YACR,EAEYE,EAAwB,SAAAF,GACnC,OAAOJ,EAAAA,GAAAA,IAAA,iBAAoBI,EAApB,aACR,EAEYG,EAAa,SAAAC,GACxB,OAAOR,EAAAA,GAAAA,IAAA,8BAAiCQ,GACzC,C,6ECvBYC,EAAS,WACpB,OACE,+BACE,gBAAKC,MAAO,CAAEC,WAAY,OAAQC,YAAa,QAA/C,UACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,eACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,OAKlB,C,wKCZc,SAASC,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQrB,GAAOsB,EAAAA,EAAAA,MAAPtB,GAkBR,OAhBAuB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,WAAMxB,GAAN,uFAEpBqB,GAAa,GAFO,UAGFnB,EAAAA,EAAAA,IAAsBuB,OAAOzB,IAH3B,OAGd0B,EAHc,OAIpBP,EAAWO,EAAIC,KAAKC,SAJA,gDAOpBC,QAAQC,IAAI,KAAMC,SAPE,yBASpBV,GAAa,GATO,4EAAH,sDAYrBG,EAAgBxB,EACjB,GAAE,CAACA,KAGF,UAAC,IAAD,WACGoB,IAAa,SAAC,IAAD,IACbF,EAAQc,OAAS,GAChBd,EAAQe,KAAI,YAA8B,IAA3BjC,EAA0B,EAA1BA,GAAIkC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzB,OACE,UAAC,IAAD,CAAcC,GAAI,EAAlB,WACE,UAAC,IAAD,CAAKC,WAAW,OAAhB,qBAAgCH,MAChC,6BAAKC,OAFGnC,EAKb,IACiB,IAAnBkB,EAAQc,SACP,SAAC,IAAD,0DAIP,C","sources":["components/Api/fetchData.jsx","components/Loader/Loader.jsx","components/MovieDetails/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '368aa8eefea213f2e59844c75600bcb3',\n};\n\nexport const fetchTrendingMovies = () => {\n  return axios.get(`/trending/all/day`);\n};\n\nexport const fetchMovieById = id => {\n  return axios.get(`/movie/${id}`);\n};\n\nexport const fetchMovieCastById = id => {\n  return axios.get(`/movie/${id}/credits`);\n};\n\nexport const fetchMovieReviewsById = id => {\n  return axios.get(`/movie/${id}/reviews?`);\n};\n\nexport const fetchQuery = query => {\n  return axios.get(`/search/movie?query=${query}`);\n};\n","import { Bars } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <>\n      <div style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n        <Bars\n          height=\"80\"\n          width=\"80\"\n          color=\"#4fa94d\"\n          ariaLabel=\"bars-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      </div>\n    </>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Box } from 'components/Box/Box';\nimport { fetchMovieReviewsById } from 'components/Api/fetchData';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { id } = useParams();\n  \n  useEffect(() => {\n    const getReviewstById = async id => {\n      try {\n        setIsLoading(true);\n        const res = await fetchMovieReviewsById(Number(id));\n        setReviews(res.data.results);\n        //console.log(res.data.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getReviewstById(id);\n  }, [id]);\n\n  return (\n    <Box>\n      {isLoading && <Loader />}\n      {reviews.length > 0 &&\n        reviews.map(({ id, author, content }) => {\n          return (\n            <Box key={id} ml={5}>\n              <Box fontWeight=\"bold\">Author: {author}</Box>\n              <p> {content}</p>\n            </Box>\n          );\n        })}\n      {reviews.length === 0 && (\n        <Box>We don't have any reviews for this movie.</Box>\n      )}\n    </Box>\n  );\n}\n"],"names":["axios","api_key","fetchTrendingMovies","fetchMovieById","id","fetchMovieCastById","fetchMovieReviewsById","fetchQuery","query","Loader","style","marginLeft","marginRight","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","Reviews","useState","reviews","setReviews","isLoading","setIsLoading","useParams","useEffect","getReviewstById","Number","res","data","results","console","log","message","length","map","author","content","ml","fontWeight"],"sourceRoot":""}