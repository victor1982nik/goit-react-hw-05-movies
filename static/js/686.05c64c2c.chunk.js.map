{"version":3,"file":"static/js/686.05c64c2c.chunk.js","mappings":"sRAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,GAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAsB,WACjC,OAAOF,EAAAA,GAAAA,IAAA,oBACR,EAEYG,EAAiB,SAAAC,GAC5B,OAAOJ,EAAAA,GAAAA,IAAA,iBAAoBI,GAC5B,EAEYC,EAAqB,SAAAD,GAChC,OAAOJ,EAAAA,GAAAA,IAAA,iBAAoBI,EAApB,YACR,EAEYE,EAAwB,SAAAF,GACnC,OAAOJ,EAAAA,GAAAA,IAAA,iBAAoBI,EAApB,aACR,EAEYG,EAAa,SAAAC,GACxB,OAAOR,EAAAA,GAAAA,IAAA,8BAAiCQ,GACzC,C,6ECvBYC,EAAS,WACpB,OACE,+BACE,gBAAKC,MAAO,CAAEC,WAAY,OAAQC,YAAa,QAA/C,UACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,eACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,OAKlB,C,kGCfYC,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,IAAD,CAAKC,QAAQ,OAAOC,cAAc,SAAlC,UACE,wBACGJ,EAAOK,KAAI,gBAAGtB,EAAH,EAAGA,GAAIuB,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,KAAvB,OACV,yBACE,SAAC,KAAD,CAASC,GAAE,kBAAazB,GAAM0B,MAAO,CAAEC,KAAMT,GAA7C,SACGK,GAAkBC,KAFdxB,EADC,OAUnB,C,4IChBY4B,E,QAAQC,EAAAA,MAAH,uK,SCALC,EAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,OACE,kBAAMA,SAAUA,EAAhB,WACE,SAACH,EAAD,CACEI,KAAK,OACLR,KAAK,QACLS,aAAa,MACbC,QAAQ,yHACRC,MAAM,yDACNC,UAAQ,EACRC,WAAS,EACTC,YAAY,mBAId,mBAAQN,KAAK,SAAS,aAAW,gBAAjC,sBAKL,E,uCC+BD,EA7Ce,WACb,OAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOtB,EAAP,KAAeuB,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMzC,EAAQwC,EAAaE,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAc,OAAV3C,GAA4B,KAAVA,EAAtB,CAEA,IAAM4C,EAAe,mCAAG,oGAEpBN,GAAa,GAFO,UAGFvC,EAAAA,EAAAA,IAAWC,GAHT,OAGd6C,EAHc,OAIpBT,EAAUS,EAAIC,KAAKC,SAJC,gDAOpBC,QAAQC,IAAI,KAAMC,SAPE,yBASpBZ,GAAa,GATO,4EAAH,qDAYrBM,GAd0C,CAe3C,GAAE,CAAC5C,IAYJ,OACE,2BACE,UAACmD,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,WACE,SAAC3B,EAAD,CAAMC,SAbc,SAAA2B,GACxBA,EAAEC,iBACF,IAAMC,EAAWF,EAAEG,OAAOC,SAAS1D,MAAM2D,MACxB,KAAbH,IAGJf,EAAgB,CAAEzC,MAAOwD,IACzBpB,EAAU,IACX,IAMMC,IAAa,SAACpC,EAAA,EAAD,IACbY,EAAO+C,OAAS,IAAK,SAAChD,EAAA,EAAD,CAAYC,OAAQA,QAIjD,C","sources":["components/Api/fetchData.jsx","components/Loader/Loader.jsx","components/MoviesList/MoviesList.jsx","components/Styles/slyles.jsx","components/Form/Form.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '368aa8eefea213f2e59844c75600bcb3',\n};\n\nexport const fetchTrendingMovies = () => {\n  return axios.get(`/trending/all/day`);\n};\n\nexport const fetchMovieById = id => {\n  return axios.get(`/movie/${id}`);\n};\n\nexport const fetchMovieCastById = id => {\n  return axios.get(`/movie/${id}/credits`);\n};\n\nexport const fetchMovieReviewsById = id => {\n  return axios.get(`/movie/${id}/reviews?`);\n};\n\nexport const fetchQuery = query => {\n  return axios.get(`/search/movie?query=${query}`);\n};\n","import { Bars } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <>\n      <div style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n        <Bars\n          height=\"80\"\n          width=\"80\"\n          color=\"#4fa94d\"\n          ariaLabel=\"bars-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      </div>\n    </>\n  );\n};\n","import { Box } from 'components/Box/Box';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <ul>\n        {movies.map(({ id, original_title, name }) => (\n          <li key={id}>\n            <NavLink to={`/movies/${id}`} state={{ from: location }}>\n              {original_title || name}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </Box>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\nmargin-right: 1px;\npadding: 2px;\nborder: none;\noutline: 1px solid black;\nborder-radius: 2px;\n:focus {\n    outline: 2px solid blue;\n  }\n`;","import { Input } from \"components/Styles/slyles\";\n\nexport const Form = ({ onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <Input            \n        type=\"text\"\n        name=\"query\"\n        autoComplete=\"off\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"May contain only letters, apostrophe, dash and spaces.\"\n        required\n        autoFocus\n        placeholder=\"Search movies\"\n        //onChange={e => setQuery(e.target.value)}\n        //value={query}\n      />\n      <button type=\"submit\" aria-label=\"search button\">\n        Search\n      </button>\n    </form>\n  );\n};\n","import { fetchQuery } from 'components/Api/fetchData';\nimport { Box } from 'components/Box/Box';\nimport { Form } from 'components/Form/Form';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query === null || query === '') return;\n    //console.log(query);\n    const getFilmsByQuery = async () => {\n      try {\n        setIsLoading(true);\n        const res = await fetchQuery(query);\n        setMovies(res.data.results);\n        //console.log(res.data.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getFilmsByQuery();\n  }, [query]);\n\n  const handlerFormSubmit = e => {\n    e.preventDefault();\n    const queryStr = e.target.elements.query.value;\n    if (queryStr === '') {\n      return;\n    }\n    setSearchParams({ query: queryStr });\n    setMovies([]);\n  };\n\n  return (\n    <main>\n      <Box pt={3} pl={3}>\n        <Form onSubmit={handlerFormSubmit}></Form>\n        {isLoading && <Loader />}\n        {movies.length > 0 && <MoviesList movies={movies} />}\n      </Box>\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","api_key","fetchTrendingMovies","fetchMovieById","id","fetchMovieCastById","fetchMovieReviewsById","fetchQuery","query","Loader","style","marginLeft","marginRight","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","MoviesList","movies","location","useLocation","display","flexDirection","map","original_title","name","to","state","from","Input","styled","Form","onSubmit","type","autoComplete","pattern","title","required","autoFocus","placeholder","useState","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","get","useEffect","getFilmsByQuery","res","data","results","console","log","message","Box","pt","pl","e","preventDefault","queryStr","target","elements","value","length"],"sourceRoot":""}